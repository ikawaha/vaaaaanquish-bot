// Code generated by goagen v1.1.0, command line:
// $ goagen
// --design=github.com/ikawaha/vaaaaanquish-bot/design
// --out=$(GOPATH)/src/github.com/ikawaha/vaaaaanquish-bot
// --version=v1.1.0
//
// API "vaaaaanquish-bot": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// MessageController is the controller interface for the Message actions.
type MessageController interface {
	goa.Muxer
	Inbound(*InboundMessageContext) error
}

// MountMessageController "mounts" a Message resource controller on the given service.
func MountMessageController(service *goa.Service, ctrl MessageController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInboundMessageContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SlackMessage)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Inbound(rctx)
	}
	service.Mux.Handle("POST", "/v1/slack/inbound", ctrl.MuxHandler("Inbound", h, unmarshalInboundMessagePayload))
	service.LogInfo("mount", "ctrl", "Message", "action", "Inbound", "route", "POST /v1/slack/inbound")
}

// unmarshalInboundMessagePayload unmarshals the request body into the context request data Payload field.
func unmarshalInboundMessagePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &slackMessage{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PublicController is the controller interface for the Public actions.
type PublicController interface {
	goa.Muxer
	goa.FileServer
}

// MountPublicController "mounts" a Public resource controller on the given service.
func MountPublicController(service *goa.Service, ctrl PublicController) {
	initService(service)
	var h goa.Handler

	h = ctrl.FileHandler("/static/*filepath", "./static/")
	service.Mux.Handle("GET", "/static/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "./static/", "route", "GET /static/*filepath")

	h = ctrl.FileHandler("/", "./templates/index.tmpl.html")
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "./templates/index.tmpl.html", "route", "GET /")

	h = ctrl.FileHandler("/static/", "static/index.html")
	service.Mux.Handle("GET", "/static/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "static/index.html", "route", "GET /static/")
}
